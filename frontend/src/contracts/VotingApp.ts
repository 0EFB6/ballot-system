/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import { Algodv2, OnApplicationComplete, Transaction, TransactionWithSigner, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "setSeatNo(string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "vote(uint8)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getLocalSeatNo()string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getLocalCandidateId()uint8": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getVoted()uint8": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createBox(string)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addSeat(string,string,string)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addCandidate(string,string,string,uint8)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "initVote(string)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "readSeat(string)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "readCandidate(string,uint8)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "readVote1(string)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "readVote2(string)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "readVote3(string)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "readVote4(string)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "readVote5(string)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "readVote6(string)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "readVote7(string)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "readVote8(string)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "readWholeBox(string)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "verify_acc_init(account,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createBoxUuid(string)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_uuid(string)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "readBoxIcNo(string)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "putBoxDebug(string,string,uint16)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 1,
      "num_uints": 3
    }
  },
  "schema": {
    "global": {
      "declared": {},
      "reserved": {}
    },
    "local": {
      "declared": {
        "candidate_id": {
          "type": "uint64",
          "key": "candidate_id",
          "descr": "The candidate ID which voters are voting for"
        },
        "collected_ballot": {
          "type": "uint64",
          "key": "collected_ballot",
          "descr": "Value indicating voter collected ballot id or not, 0 indicate haven't collected, 1 indicate collected"
        },
        "custom_uid": {
          "type": "bytes",
          "key": "custom_uid",
          "descr": "The custom part of the uid, eg. 0311000010810"
        },
        "voted": {
          "type": "uint64",
          "key": "voted",
          "descr": "Value indicating voters have voted or not, 0 indicate not voted, 1 indicate voted"
        }
      },
      "reserved": {}
    }
  },
  "contract": {
    "name": "VotingApp",
    "methods": [
      {
        "name": "setSeatNo",
        "args": [
          {
            "type": "string",
            "name": "seat"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "vote",
        "args": [
          {
            "type": "uint8",
            "name": "can_id"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "getLocalSeatNo",
        "args": [],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "getLocalCandidateId",
        "args": [],
        "returns": {
          "type": "uint8"
        }
      },
      {
        "name": "getVoted",
        "args": [],
        "returns": {
          "type": "uint8"
        }
      },
      {
        "name": "createBox",
        "args": [
          {
            "type": "string",
            "name": "seat"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "addSeat",
        "args": [
          {
            "type": "string",
            "name": "seat"
          },
          {
            "type": "string",
            "name": "area"
          },
          {
            "type": "string",
            "name": "state"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "addCandidate",
        "args": [
          {
            "type": "string",
            "name": "seat"
          },
          {
            "type": "string",
            "name": "name"
          },
          {
            "type": "string",
            "name": "party"
          },
          {
            "type": "uint8",
            "name": "i"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "initVote",
        "args": [
          {
            "type": "string",
            "name": "seat"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "readSeat",
        "args": [
          {
            "type": "string",
            "name": "seat"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "readCandidate",
        "args": [
          {
            "type": "string",
            "name": "seat"
          },
          {
            "type": "uint8",
            "name": "i"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "readVote1",
        "args": [
          {
            "type": "string",
            "name": "seat"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "readVote2",
        "args": [
          {
            "type": "string",
            "name": "seat"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "readVote3",
        "args": [
          {
            "type": "string",
            "name": "seat"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "readVote4",
        "args": [
          {
            "type": "string",
            "name": "seat"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "readVote5",
        "args": [
          {
            "type": "string",
            "name": "seat"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "readVote6",
        "args": [
          {
            "type": "string",
            "name": "seat"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "readVote7",
        "args": [
          {
            "type": "string",
            "name": "seat"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "readVote8",
        "args": [
          {
            "type": "string",
            "name": "seat"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "readWholeBox",
        "args": [
          {
            "type": "string",
            "name": "seat"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "verify_acc_init",
        "args": [
          {
            "type": "account",
            "name": "account"
          },
          {
            "type": "string",
            "name": "custom_uid"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createBoxUuid",
        "args": [
          {
            "type": "string",
            "name": "name"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "get_uuid",
        "args": [
          {
            "type": "string",
            "name": "ic_num"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "readBoxIcNo",
        "args": [
          {
            "type": "string",
            "name": "ic_num"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "putBoxDebug",
        "args": [
          {
            "type": "string",
            "name": "seat"
          },
          {
            "type": "string",
            "name": "value"
          },
          {
            "type": "uint16",
            "name": "i"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "no_op": "CREATE",
    "opt_in": "CALL"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the VotingApp smart contract.
 */
export type VotingApp = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'setSeatNo(string)void' | 'setSeatNo', {
      argsObj: {
        seat: string
      }
      argsTuple: [seat: string]
      returns: void
    }>
    & Record<'vote(uint8)string' | 'vote', {
      argsObj: {
        can_id: number
      }
      argsTuple: [can_id: number]
      returns: string
    }>
    & Record<'getLocalSeatNo()string' | 'getLocalSeatNo', {
      argsObj: {
      }
      argsTuple: []
      returns: string
    }>
    & Record<'getLocalCandidateId()uint8' | 'getLocalCandidateId', {
      argsObj: {
      }
      argsTuple: []
      returns: number
    }>
    & Record<'getVoted()uint8' | 'getVoted', {
      argsObj: {
      }
      argsTuple: []
      returns: number
    }>
    & Record<'createBox(string)string' | 'createBox', {
      argsObj: {
        seat: string
      }
      argsTuple: [seat: string]
      returns: string
    }>
    & Record<'addSeat(string,string,string)string' | 'addSeat', {
      argsObj: {
        seat: string
        area: string
        state: string
      }
      argsTuple: [seat: string, area: string, state: string]
      returns: string
    }>
    & Record<'addCandidate(string,string,string,uint8)string' | 'addCandidate', {
      argsObj: {
        seat: string
        name: string
        party: string
        i: number
      }
      argsTuple: [seat: string, name: string, party: string, i: number]
      returns: string
    }>
    & Record<'initVote(string)string' | 'initVote', {
      argsObj: {
        seat: string
      }
      argsTuple: [seat: string]
      returns: string
    }>
    & Record<'readSeat(string)string' | 'readSeat', {
      argsObj: {
        seat: string
      }
      argsTuple: [seat: string]
      returns: string
    }>
    & Record<'readCandidate(string,uint8)string' | 'readCandidate', {
      argsObj: {
        seat: string
        i: number
      }
      argsTuple: [seat: string, i: number]
      returns: string
    }>
    & Record<'readVote1(string)string' | 'readVote1', {
      argsObj: {
        seat: string
      }
      argsTuple: [seat: string]
      returns: string
    }>
    & Record<'readVote2(string)string' | 'readVote2', {
      argsObj: {
        seat: string
      }
      argsTuple: [seat: string]
      returns: string
    }>
    & Record<'readVote3(string)string' | 'readVote3', {
      argsObj: {
        seat: string
      }
      argsTuple: [seat: string]
      returns: string
    }>
    & Record<'readVote4(string)string' | 'readVote4', {
      argsObj: {
        seat: string
      }
      argsTuple: [seat: string]
      returns: string
    }>
    & Record<'readVote5(string)string' | 'readVote5', {
      argsObj: {
        seat: string
      }
      argsTuple: [seat: string]
      returns: string
    }>
    & Record<'readVote6(string)string' | 'readVote6', {
      argsObj: {
        seat: string
      }
      argsTuple: [seat: string]
      returns: string
    }>
    & Record<'readVote7(string)string' | 'readVote7', {
      argsObj: {
        seat: string
      }
      argsTuple: [seat: string]
      returns: string
    }>
    & Record<'readVote8(string)string' | 'readVote8', {
      argsObj: {
        seat: string
      }
      argsTuple: [seat: string]
      returns: string
    }>
    & Record<'readWholeBox(string)string' | 'readWholeBox', {
      argsObj: {
        seat: string
      }
      argsTuple: [seat: string]
      returns: string
    }>
    & Record<'verify_acc_init(account,string)void' | 'verify_acc_init', {
      argsObj: {
        account: string | Uint8Array
        custom_uid: string
      }
      argsTuple: [account: string | Uint8Array, custom_uid: string]
      returns: void
    }>
    & Record<'createBoxUuid(string)string' | 'createBoxUuid', {
      argsObj: {
        name: string
      }
      argsTuple: [name: string]
      returns: string
    }>
    & Record<'get_uuid(string)string' | 'get_uuid', {
      argsObj: {
        ic_num: string
      }
      argsTuple: [ic_num: string]
      returns: string
    }>
    & Record<'readBoxIcNo(string)string' | 'readBoxIcNo', {
      argsObj: {
        ic_num: string
      }
      argsTuple: [ic_num: string]
      returns: string
    }>
    & Record<'putBoxDebug(string,string,uint16)void' | 'putBoxDebug', {
      argsObj: {
        seat: string
        value: string
        i: number
      }
      argsTuple: [seat: string, value: string, i: number]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    local: {
      /**
       * The candidate ID which voters are voting for
       */
      'candidate_id'?: IntegerState
      /**
       * Value indicating voter collected ballot id or not, 0 indicate haven't collected, 1 indicate collected
       */
      'collected_ballot'?: IntegerState
      /**
       * The custom part of the uid, eg. 0311000010810
       */
      'custom_uid'?: BinaryState
      /**
       * Value indicating voters have voted or not, 0 indicate not voted, 1 indicate voted
       */
      'voted'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type VotingAppSig = keyof VotingApp['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends VotingAppSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the VotingApp smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends VotingAppSig> = VotingApp['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the VotingApp smart contract to the method's return type
 */
export type MethodReturn<TSignature extends VotingAppSig> = VotingApp['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type VotingAppCreateCalls = (typeof VotingAppCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type VotingAppCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type VotingAppDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: VotingAppCreateCalls) => VotingAppCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class VotingAppCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the VotingApp smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available optIn call factories
   */
  static get optIn() {
    return {
      /**
       * Constructs an opt in call for the VotingApp smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the setSeatNo(string)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setSeatNo(args: MethodArgs<'setSeatNo(string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setSeatNo(string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.seat],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the vote(uint8)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static vote(args: MethodArgs<'vote(uint8)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'vote(uint8)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.can_id],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getLocalSeatNo()string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getLocalSeatNo(args: MethodArgs<'getLocalSeatNo()string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getLocalSeatNo()string' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getLocalCandidateId()uint8 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getLocalCandidateId(args: MethodArgs<'getLocalCandidateId()uint8'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getLocalCandidateId()uint8' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getVoted()uint8 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getVoted(args: MethodArgs<'getVoted()uint8'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getVoted()uint8' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the createBox(string)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createBox(args: MethodArgs<'createBox(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createBox(string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.seat],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addSeat(string,string,string)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addSeat(args: MethodArgs<'addSeat(string,string,string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addSeat(string,string,string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.seat, args.area, args.state],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addCandidate(string,string,string,uint8)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addCandidate(args: MethodArgs<'addCandidate(string,string,string,uint8)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addCandidate(string,string,string,uint8)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.seat, args.name, args.party, args.i],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the initVote(string)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static initVote(args: MethodArgs<'initVote(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'initVote(string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.seat],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the readSeat(string)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static readSeat(args: MethodArgs<'readSeat(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'readSeat(string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.seat],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the readCandidate(string,uint8)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static readCandidate(args: MethodArgs<'readCandidate(string,uint8)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'readCandidate(string,uint8)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.seat, args.i],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the readVote1(string)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static readVote1(args: MethodArgs<'readVote1(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'readVote1(string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.seat],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the readVote2(string)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static readVote2(args: MethodArgs<'readVote2(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'readVote2(string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.seat],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the readVote3(string)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static readVote3(args: MethodArgs<'readVote3(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'readVote3(string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.seat],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the readVote4(string)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static readVote4(args: MethodArgs<'readVote4(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'readVote4(string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.seat],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the readVote5(string)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static readVote5(args: MethodArgs<'readVote5(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'readVote5(string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.seat],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the readVote6(string)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static readVote6(args: MethodArgs<'readVote6(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'readVote6(string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.seat],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the readVote7(string)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static readVote7(args: MethodArgs<'readVote7(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'readVote7(string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.seat],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the readVote8(string)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static readVote8(args: MethodArgs<'readVote8(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'readVote8(string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.seat],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the readWholeBox(string)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static readWholeBox(args: MethodArgs<'readWholeBox(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'readWholeBox(string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.seat],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the verify_acc_init(account,string)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static verifyAccInit(args: MethodArgs<'verify_acc_init(account,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'verify_acc_init(account,string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.account, args.custom_uid],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the createBoxUuid(string)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createBoxUuid(args: MethodArgs<'createBoxUuid(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createBoxUuid(string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.name],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_uuid(string)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getUuid(args: MethodArgs<'get_uuid(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_uuid(string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.ic_num],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the readBoxIcNo(string)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static readBoxIcNo(args: MethodArgs<'readBoxIcNo(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'readBoxIcNo(string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.ic_num],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the putBoxDebug(string,string,uint16)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static putBoxDebug(args: MethodArgs<'putBoxDebug(string,string,uint16)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'putBoxDebug(string,string,uint16)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.seat, args.value, args.i],
      ...params,
    }
  }
}

/**
 * A client to make calls to the VotingApp smart contract
 */
export class VotingAppClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `VotingAppClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof VotingApp['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the VotingApp smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: VotingAppDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(VotingAppCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the VotingApp smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.create(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Gets available optIn methods
   */
  public get optIn() {
    const $this = this
    return {
      /**
       * Opts the user into an existing instance of the VotingApp smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The optIn result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.optIn(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the VotingApp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the setSeatNo(string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setSeatNo(args: MethodArgs<'setSeatNo(string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VotingAppCallFactory.setSeatNo(args, params))
  }

  /**
   * Calls the vote(uint8)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public vote(args: MethodArgs<'vote(uint8)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VotingAppCallFactory.vote(args, params))
  }

  /**
   * Calls the getLocalSeatNo()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getLocalSeatNo(args: MethodArgs<'getLocalSeatNo()string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VotingAppCallFactory.getLocalSeatNo(args, params))
  }

  /**
   * Calls the getLocalCandidateId()uint8 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getLocalCandidateId(args: MethodArgs<'getLocalCandidateId()uint8'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VotingAppCallFactory.getLocalCandidateId(args, params))
  }

  /**
   * Calls the getVoted()uint8 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getVoted(args: MethodArgs<'getVoted()uint8'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VotingAppCallFactory.getVoted(args, params))
  }

  /**
   * Calls the createBox(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createBox(args: MethodArgs<'createBox(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VotingAppCallFactory.createBox(args, params))
  }

  /**
   * Calls the addSeat(string,string,string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addSeat(args: MethodArgs<'addSeat(string,string,string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VotingAppCallFactory.addSeat(args, params))
  }

  /**
   * Calls the addCandidate(string,string,string,uint8)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addCandidate(args: MethodArgs<'addCandidate(string,string,string,uint8)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VotingAppCallFactory.addCandidate(args, params))
  }

  /**
   * Calls the initVote(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public initVote(args: MethodArgs<'initVote(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VotingAppCallFactory.initVote(args, params))
  }

  /**
   * Calls the readSeat(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public readSeat(args: MethodArgs<'readSeat(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VotingAppCallFactory.readSeat(args, params))
  }

  /**
   * Calls the readCandidate(string,uint8)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public readCandidate(args: MethodArgs<'readCandidate(string,uint8)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VotingAppCallFactory.readCandidate(args, params))
  }

  /**
   * Calls the readVote1(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public readVote1(args: MethodArgs<'readVote1(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VotingAppCallFactory.readVote1(args, params))
  }

  /**
   * Calls the readVote2(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public readVote2(args: MethodArgs<'readVote2(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VotingAppCallFactory.readVote2(args, params))
  }

  /**
   * Calls the readVote3(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public readVote3(args: MethodArgs<'readVote3(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VotingAppCallFactory.readVote3(args, params))
  }

  /**
   * Calls the readVote4(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public readVote4(args: MethodArgs<'readVote4(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VotingAppCallFactory.readVote4(args, params))
  }

  /**
   * Calls the readVote5(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public readVote5(args: MethodArgs<'readVote5(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VotingAppCallFactory.readVote5(args, params))
  }

  /**
   * Calls the readVote6(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public readVote6(args: MethodArgs<'readVote6(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VotingAppCallFactory.readVote6(args, params))
  }

  /**
   * Calls the readVote7(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public readVote7(args: MethodArgs<'readVote7(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VotingAppCallFactory.readVote7(args, params))
  }

  /**
   * Calls the readVote8(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public readVote8(args: MethodArgs<'readVote8(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VotingAppCallFactory.readVote8(args, params))
  }

  /**
   * Calls the readWholeBox(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public readWholeBox(args: MethodArgs<'readWholeBox(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VotingAppCallFactory.readWholeBox(args, params))
  }

  /**
   * Calls the verify_acc_init(account,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public verifyAccInit(args: MethodArgs<'verify_acc_init(account,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VotingAppCallFactory.verifyAccInit(args, params))
  }

  /**
   * Calls the createBoxUuid(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createBoxUuid(args: MethodArgs<'createBoxUuid(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VotingAppCallFactory.createBoxUuid(args, params))
  }

  /**
   * Calls the get_uuid(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getUuid(args: MethodArgs<'get_uuid(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VotingAppCallFactory.getUuid(args, params))
  }

  /**
   * Calls the readBoxIcNo(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public readBoxIcNo(args: MethodArgs<'readBoxIcNo(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VotingAppCallFactory.readBoxIcNo(args, params))
  }

  /**
   * Calls the putBoxDebug(string,string,uint16)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public putBoxDebug(args: MethodArgs<'putBoxDebug(string,string,uint16)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VotingAppCallFactory.putBoxDebug(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's local state wrapped in a strongly typed accessor with options to format the stored value
   *
   * @param account The address of the account for which to read local state from
   */
  public async getLocalState(account: string | SendTransactionFrom): Promise<VotingApp['state']['local']> {
    const state = await this.appClient.getLocalState(account)
    return {
      get candidate_id() {
        return VotingAppClient.getIntegerState(state, 'candidate_id')
      },
      get collected_ballot() {
        return VotingAppClient.getIntegerState(state, 'collected_ballot')
      },
      get custom_uid() {
        return VotingAppClient.getBinaryState(state, 'custom_uid')
      },
      get voted() {
        return VotingAppClient.getIntegerState(state, 'voted')
      },
    }
  }

  public compose(): VotingAppComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      setSeatNo(args: MethodArgs<'setSeatNo(string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setSeatNo(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      vote(args: MethodArgs<'vote(uint8)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.vote(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getLocalSeatNo(args: MethodArgs<'getLocalSeatNo()string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getLocalSeatNo(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getLocalCandidateId(args: MethodArgs<'getLocalCandidateId()uint8'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getLocalCandidateId(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getVoted(args: MethodArgs<'getVoted()uint8'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getVoted(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createBox(args: MethodArgs<'createBox(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createBox(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addSeat(args: MethodArgs<'addSeat(string,string,string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addSeat(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addCandidate(args: MethodArgs<'addCandidate(string,string,string,uint8)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addCandidate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      initVote(args: MethodArgs<'initVote(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.initVote(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      readSeat(args: MethodArgs<'readSeat(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.readSeat(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      readCandidate(args: MethodArgs<'readCandidate(string,uint8)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.readCandidate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      readVote1(args: MethodArgs<'readVote1(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.readVote1(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      readVote2(args: MethodArgs<'readVote2(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.readVote2(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      readVote3(args: MethodArgs<'readVote3(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.readVote3(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      readVote4(args: MethodArgs<'readVote4(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.readVote4(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      readVote5(args: MethodArgs<'readVote5(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.readVote5(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      readVote6(args: MethodArgs<'readVote6(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.readVote6(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      readVote7(args: MethodArgs<'readVote7(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.readVote7(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      readVote8(args: MethodArgs<'readVote8(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.readVote8(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      readWholeBox(args: MethodArgs<'readWholeBox(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.readWholeBox(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      verifyAccInit(args: MethodArgs<'verify_acc_init(account,string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.verifyAccInit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createBoxUuid(args: MethodArgs<'createBoxUuid(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createBoxUuid(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getUuid(args: MethodArgs<'get_uuid(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getUuid(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      readBoxIcNo(args: MethodArgs<'readBoxIcNo(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.readBoxIcNo(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      putBoxDebug(args: MethodArgs<'putBoxDebug(string,string,uint16)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.putBoxDebug(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get optIn() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.optIn.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as VotingAppComposer
  }
}
export type VotingAppComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the setSeatNo(string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setSeatNo(args: MethodArgs<'setSeatNo(string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VotingAppComposer<[...TReturns, MethodReturn<'setSeatNo(string)void'>]>

  /**
   * Calls the vote(uint8)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  vote(args: MethodArgs<'vote(uint8)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VotingAppComposer<[...TReturns, MethodReturn<'vote(uint8)string'>]>

  /**
   * Calls the getLocalSeatNo()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLocalSeatNo(args: MethodArgs<'getLocalSeatNo()string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VotingAppComposer<[...TReturns, MethodReturn<'getLocalSeatNo()string'>]>

  /**
   * Calls the getLocalCandidateId()uint8 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLocalCandidateId(args: MethodArgs<'getLocalCandidateId()uint8'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VotingAppComposer<[...TReturns, MethodReturn<'getLocalCandidateId()uint8'>]>

  /**
   * Calls the getVoted()uint8 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getVoted(args: MethodArgs<'getVoted()uint8'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VotingAppComposer<[...TReturns, MethodReturn<'getVoted()uint8'>]>

  /**
   * Calls the createBox(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createBox(args: MethodArgs<'createBox(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VotingAppComposer<[...TReturns, MethodReturn<'createBox(string)string'>]>

  /**
   * Calls the addSeat(string,string,string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addSeat(args: MethodArgs<'addSeat(string,string,string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VotingAppComposer<[...TReturns, MethodReturn<'addSeat(string,string,string)string'>]>

  /**
   * Calls the addCandidate(string,string,string,uint8)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addCandidate(args: MethodArgs<'addCandidate(string,string,string,uint8)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VotingAppComposer<[...TReturns, MethodReturn<'addCandidate(string,string,string,uint8)string'>]>

  /**
   * Calls the initVote(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initVote(args: MethodArgs<'initVote(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VotingAppComposer<[...TReturns, MethodReturn<'initVote(string)string'>]>

  /**
   * Calls the readSeat(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  readSeat(args: MethodArgs<'readSeat(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VotingAppComposer<[...TReturns, MethodReturn<'readSeat(string)string'>]>

  /**
   * Calls the readCandidate(string,uint8)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  readCandidate(args: MethodArgs<'readCandidate(string,uint8)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VotingAppComposer<[...TReturns, MethodReturn<'readCandidate(string,uint8)string'>]>

  /**
   * Calls the readVote1(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  readVote1(args: MethodArgs<'readVote1(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VotingAppComposer<[...TReturns, MethodReturn<'readVote1(string)string'>]>

  /**
   * Calls the readVote2(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  readVote2(args: MethodArgs<'readVote2(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VotingAppComposer<[...TReturns, MethodReturn<'readVote2(string)string'>]>

  /**
   * Calls the readVote3(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  readVote3(args: MethodArgs<'readVote3(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VotingAppComposer<[...TReturns, MethodReturn<'readVote3(string)string'>]>

  /**
   * Calls the readVote4(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  readVote4(args: MethodArgs<'readVote4(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VotingAppComposer<[...TReturns, MethodReturn<'readVote4(string)string'>]>

  /**
   * Calls the readVote5(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  readVote5(args: MethodArgs<'readVote5(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VotingAppComposer<[...TReturns, MethodReturn<'readVote5(string)string'>]>

  /**
   * Calls the readVote6(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  readVote6(args: MethodArgs<'readVote6(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VotingAppComposer<[...TReturns, MethodReturn<'readVote6(string)string'>]>

  /**
   * Calls the readVote7(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  readVote7(args: MethodArgs<'readVote7(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VotingAppComposer<[...TReturns, MethodReturn<'readVote7(string)string'>]>

  /**
   * Calls the readVote8(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  readVote8(args: MethodArgs<'readVote8(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VotingAppComposer<[...TReturns, MethodReturn<'readVote8(string)string'>]>

  /**
   * Calls the readWholeBox(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  readWholeBox(args: MethodArgs<'readWholeBox(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VotingAppComposer<[...TReturns, MethodReturn<'readWholeBox(string)string'>]>

  /**
   * Calls the verify_acc_init(account,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  verifyAccInit(args: MethodArgs<'verify_acc_init(account,string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VotingAppComposer<[...TReturns, MethodReturn<'verify_acc_init(account,string)void'>]>

  /**
   * Calls the createBoxUuid(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createBoxUuid(args: MethodArgs<'createBoxUuid(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VotingAppComposer<[...TReturns, MethodReturn<'createBoxUuid(string)string'>]>

  /**
   * Calls the get_uuid(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUuid(args: MethodArgs<'get_uuid(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VotingAppComposer<[...TReturns, MethodReturn<'get_uuid(string)string'>]>

  /**
   * Calls the readBoxIcNo(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  readBoxIcNo(args: MethodArgs<'readBoxIcNo(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VotingAppComposer<[...TReturns, MethodReturn<'readBoxIcNo(string)string'>]>

  /**
   * Calls the putBoxDebug(string,string,uint16)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  putBoxDebug(args: MethodArgs<'putBoxDebug(string,string,uint16)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VotingAppComposer<[...TReturns, MethodReturn<'putBoxDebug(string,string,uint16)void'>]>

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the VotingApp smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): VotingAppComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the VotingApp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): VotingAppComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): VotingAppComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<VotingAppComposerResults<TReturns>>
}
export type VotingAppComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
